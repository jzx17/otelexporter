// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/otelexporter/otelexporter.go

package mocks

import (
	"reflect"

	"go.uber.org/mock/gomock"
	"go.uber.org/zap"
)

// MockLogger is a mock of the Logger interface.
type MockLogger struct {
	ctrl     *gomock.Controller
	recorder *MockLoggerMockRecorder
}

// MockLoggerMockRecorder is the mock recorder for MockLogger.
type MockLoggerMockRecorder struct {
	mock *MockLogger
}

// NewMockLogger creates a new mock instance.
func NewMockLogger(ctrl *gomock.Controller) *MockLogger {
	mock := &MockLogger{ctrl: ctrl}
	mock.recorder = &MockLoggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLogger) EXPECT() *MockLoggerMockRecorder {
	return m.recorder
}

// Info mocks base method.
func (m *MockLogger) Info(msg string, fields ...zap.Field) {
	m.ctrl.T.Helper()
	args := []interface{}{msg}
	for _, f := range fields {
		args = append(args, f)
	}
	m.ctrl.Call(m, "Info", args...)
}

// Info indicates an expected call of Info.
func (mr *MockLoggerMockRecorder) Info(msg interface{}, fields ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	args := append([]interface{}{msg}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockLogger)(nil).Info), args...)
}

// Error mocks base method.
func (m *MockLogger) Error(msg string, fields ...zap.Field) {
	m.ctrl.T.Helper()
	args := []interface{}{msg}
	for _, f := range fields {
		args = append(args, f)
	}
	m.ctrl.Call(m, "Error", args...)
}

// Error indicates an expected call of Error.
func (mr *MockLoggerMockRecorder) Error(msg interface{}, fields ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	args := append([]interface{}{msg}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockLogger)(nil).Error), args...)
}

// Debug mocks base method.
func (m *MockLogger) Debug(msg string, fields ...zap.Field) {
	m.ctrl.T.Helper()
	args := []interface{}{msg}
	for _, f := range fields {
		args = append(args, f)
	}
	m.ctrl.Call(m, "Debug", args...)
}

// Debug indicates an expected call of Debug.
func (mr *MockLoggerMockRecorder) Debug(msg interface{}, fields ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	args := append([]interface{}{msg}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Debug", reflect.TypeOf((*MockLogger)(nil).Debug), args...)
}

// Sync mocks base method.
func (m *MockLogger) Sync() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sync")
	ret0, _ := ret[0].(error)
	return ret0
}

// Sync indicates an expected call of Sync.
func (mr *MockLoggerMockRecorder) Sync() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sync", reflect.TypeOf((*MockLogger)(nil).Sync))
}